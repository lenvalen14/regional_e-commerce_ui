import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { Badge } from "@/components/ui/badge"
import { Product, useSoftDeleteProductMutation } from "@/features/product/productApi"


interface DeleteProductModalProps {
  isOpen: boolean
  onClose: () => void
  onDelete: (productId: string) => void
  product: Product | null
  refetchProducts: () => void
}

export default function DeleteProductModal({ isOpen, onClose, onDelete, product, refetchProducts }: DeleteProductModalProps) {

  const [deleteProduct, { isLoading, isError }] = useSoftDeleteProductMutation();

  const handleDelete = async () => {
    if (product) {
      try {
        await deleteProduct(product.productId).unwrap(); // G·ªçi API x√≥a
        onDelete(product.productId); // C·∫≠p nh·∫≠t state local ·ªü page
        await refetchProducts();
        onClose();
      } catch (err) {
        console.error("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i:", err);
      }
    }
  }

  if (!product) return null

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN').format(price)
  }

  const getStatusBadge = (stockQuantity: number) => {
    if (stockQuantity === 0) return <Badge className="bg-red-100 text-red-800">H·∫øt h√†ng</Badge>
    if (stockQuantity <= 20) return <Badge className="bg-yellow-100 text-yellow-800">S·∫Øp h·∫øt</Badge>
    return <Badge className="bg-green-100 text-green-800">C√≤n h√†ng</Badge>
  }

  // // const config = statusConfig[status as keyof typeof statusConfig] || statusConfig["Out of Stock"]

  // return (
  //   <Badge className={config.className}>
  //     {config.label}
  //   </Badge>
  // )


  return (
    <AlertDialog open={isOpen} onOpenChange={onClose}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>X√≥a S·∫£n Ph·∫©m</AlertDialogTitle>
          <AlertDialogDescription asChild>
            <div className="space-y-4">
              <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>

              <div className="bg-gray-50 p-4 rounded-md space-y-3">
                <h4 className="font-medium text-gray-900">Chi ti·∫øt s·∫£n ph·∫©m:</h4>
                <div className="space-y-2 text-sm">
                  <p><span className="font-medium">T√™n:</span> {product.productName}</p>
                  <p><span className="font-medium">Danh m·ª•c:</span> {product.category.categoryName}</p>
                  <p><span className="font-medium">V√πng mi·ªÅn:</span> {product.region.regionName}</p>
                  <p><span className="font-medium">Gi√°:</span> {formatPrice(product.price)}ƒë</p>
                  <p><span className="font-medium">S·ªë l∆∞·ª£ng kho:</span> {product.stockQuantity}</p>
                  <div className="flex items-center space-x-2">
                    <span className="font-medium">Tr·∫°ng th√°i:</span>
                    {getStatusBadge(product.stockQuantity)}
                  </div>
                  <p><span className="font-medium">M√¥ t·∫£:</span></p>
                  <p className="text-gray-600 bg-white p-2 rounded border text-xs">{product.description}</p>
                </div>
              </div>

              {product.stockQuantity > 0 && (
                <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-md">
                  <p className="text-yellow-800 text-sm">
                    ‚ö†Ô∏è <strong>C·∫£nh b√°o:</strong> S·∫£n ph·∫©m n√†y c√≤n {product.stockQuantity} s·∫£n ph·∫©m trong kho.
                    Vi·ªác x√≥a c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω.
                  </p>
                </div>
              )}

              <div className="bg-red-50 border border-red-200 p-3 rounded-md">
                <p className="text-red-800 text-sm">
                  üóëÔ∏è <strong>L∆∞u √Ω:</strong> Sau khi x√≥a, t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan ƒë·∫øn s·∫£n ph·∫©m n√†y s·∫Ω b·ªã m·∫•t vƒ©nh vi·ªÖn.
                </p>
              </div>
            </div>
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>H·ªßy</AlertDialogCancel>
          <AlertDialogAction
            onClick={handleDelete}
            className="bg-red-600 hover:bg-red-700"
          >
            X√≥a s·∫£n ph·∫©m
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}
